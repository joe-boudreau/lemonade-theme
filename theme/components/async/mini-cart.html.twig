{% async:content %}
    <div
        x-data="miniCart({{ cart.order.total_quantity }})"
        class="mini-cart"
        :class="{ 'is-interacting': $store.cart.isInteractingMiniCart, 'is-loading': $store.cart.isMiniCartLoading }"
        @mouseenter="$store.cart.isInteractingMiniCart = true"
        @mouseleave="onMiniCartBlur"
    >
        {% if cart.created and cart.order.total_quantity > 0 %}
            <div class="heading-5">
                {{ 'components.async.mini_cart.heading'|localize }} ({{ cart.order.total_quantity }})
            </div>

            <div class="mini-cart__items-wrapper">
                <div class="mini-cart__items-scrollbar custom-scrollbar">
                    <div class="custom-scrollbar-inner">
                    {% for item in cart.order.line_items %}
                        <div
                            x-data="miniCartItem()"
                            class="mini-cart__item"
                            :class="{ 'mini-cart__item--last': Boolean({{ loop.last }}) }"
                        >
                            <div class="row">
                                <div class="col" col-2>
                                    {# Item image #}
                                    <div class="mini-cart__item-image">
                                        <a href="{{ item_link('{{ item.id }}') }}">
                                            {{ include('partials/ui/image', { image: { uri: item.image.absolute_url, urls: item.image.urls }, imageSizes: { xs: 64 }, altText: item.name, showPlaceholder: true }) }}
                                        </a>
                                    </div>
                                </div>
                                <div class="col mini-cart__item-col" col-7>
                                    {# Item name #}
                                    <div class="mini-cart__item-name">
                                        {{ item.name }}
                                    </div>

                                    {# Increase item base price with modifiers #}
                                    {% set modifiersWithPrice = item.modifiers|filter(m => m.base_price_money.amount > 0) %}
                                    {% set itemBasePriceFormatted = item.base_price_money.formatted %}
                                    {% if modifiersWithPrice|length %}
                                        {% set itemBasePrice = item.base_price_money.amount %}
                                        {% for modifier in modifiersWithPrice %}
                                            {% set itemBasePrice = itemBasePrice + modifier.base_price_money.amount %}
                                        {% endfor %}
                                        {% set itemBasePriceFormatted = (itemBasePrice / 100)|format_price({ currency: cart.order.currency }) %}
                                    {% endif %}

                                    {# Regular and sale price #}
                                    {% set isOnSale = itemBasePriceFormatted != item.gross_price_money.formatted %}
                                    {% if isOnSale %}
                                        {% set finalPrice = item.gross_price_money.formatted %}
                                        {% if item.quantity > 1 %}
                                            {% set finalPrice = finalPrice ~ ' x ' ~ item.quantity %}
                                        {% endif %}
                                        {{ include('partials/ui/price', { formattedPrice: { regular: itemBasePriceFormatted, final: finalPrice }, size: 'tiny' }) }}
                                    {% endif %}

                                    {# Discount badge #}
                                    {% if item.applied_discounts|length %}
                                        <div class="mini-cart__item-discounts">
                                            {{ include('partials/components/store/item/badges', { badges: { has_discounts: true }, discounts: item.applied_discounts, badgeSize: 'small' } ) }}
                                        </div>
                                    {% endif %}

                                    {# Variations #}
                                    {% for variation in item.variation_name|split(',') %}
                                        {% set variationArray = variation|split(':') %}
                                        <p class="mini-cart__item-variation">
                                            <span class="mini-cart__item-variation-label">{{ variationArray[0] }}:</span>
                                            {{ variationArray[1] }}
                                        </p>
                                    {% endfor %}

                                    {# Modifiers #}
                                    {% if item.modifiers is not empty %}
                                        {% for modifier in item.modifiers %}
                                            {% if modifier.base_price_money.amount > 0 %}
                                                <p class="mini-cart__item-variation">
                                                    <span class="mini-cart__item-variation-label">{{ modifier.modifier_set_name }}</span>
                                                </p>
                                                <p class="mini-cart__item-variation">
                                                    {{ modifier.name }} (+ {{ modifier.base_price_money.formatted }})
                                                </p>
                                            {% else %}
                                                <p class="mini-cart__item-variation">
                                                    <span class="mini-cart__item-variation-label">{{ modifier.modifier_set_name }}:</span>
                                                    {{ modifier.name }}
                                                </p>
                                            {% endif %}
                                        {% endfor %}
                                    {% endif %}
                                </div>
                                <div class="col mini-cart__item-price" col-3>
                                    {# Display just the final price #}
                                    {% set itemFinalPrice = item.gross_price_money.amount * item.quantity / 100 %}
                                    {{ include('partials/ui/price', { price: {
                                        regular_high: itemFinalPrice,
                                        regular_low: itemFinalPrice,
                                        currency: cart.order.currency,
                                    }, size: 'small' }) }}
                                </div>
                            </div>
                            <div class="row mini-cart__item-actions">
                                {# Quantity input #}
                                <div class="col mini-cart__item-actions--quantity" col-6 offset-2>
                                    {% embed 'partials/form/stepper' with {
                                        label: 'partials.components.store.item.quantity.label'|localize,
                                        min: 1,
                                        hideLabel: true,
                                        size: 'small',
                                    } %}
                                        {% block data %}
                                            model: {{ item.quantity }},
                                            init() {
                                                this.$watch('model', (value) => {
                                                    this.updateItemQuantity('{{ item.id }}', value);
                                                });
                                                this.$watch('isMiniCartLoading', (isLoading) => {
                                                    this.isLoading = isLoading;
                                                });
                                            },
                                        {% endblock %}
                                    {% endembed %}
                                </div>

                                {# Delete button #}
                                <div class="col mini-cart__item-actions--delete" col-4>
                                    {{ include('partials/ui/button', {
                                        variant: 'neutral',
                                        size: 'small',
                                        icon: 'delete',
                                        iconAlt: 'components.async.mini_cart.delete_icon.alt'|localize,
                                        action: "deleteItem('" ~ item.id ~ "')",
                                    }) }}
                                </div>
                            </div>

                            {# Error message #}
                            <div x-show="failedToUpdateOrderId == '{{ item.id }}'" class="row mini-cart__item-errors">
                                <div class="col" col-10 offset-2>
                                    {{ include('partials/ui/notice', { variant: 'critical', message: 'shared.errors.general'|localize } ) }}
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                    </div>
                </div>
            </div>

            {% set formattedSubtotal = cart.order.subtotal_money.formatted %}
            {% if cart.order.discounts is not empty %}
                {% set subtotal = cart.order.subtotal_money.amount %}
                {% for discount in cart.order.discounts %}
                    {% set subtotal = subtotal - discount.applied_money.amount %}
                {% endfor %}
                {% set formattedSubtotal = (subtotal / 100)|format_price({ currency: cart.order.currency }) %}
            {% endif %}

            {% embed 'partials/ui/button' with {
                label: 'components.async.mini_cart.button'|localize ~ ' ',
                variant: 'primary',
                fullWidth: true,
                action: 'goToCartPage',
            } %}
                {% block attributes %}
                    @blur="onMiniCartBlur"
                    @keydown.tab="(e) => isShiftKeyPressed = e.shiftKey"
                {% endblock %}
                {% block content %}
                    <span>{{ formattedSubtotal }}</span>
                {% endblock %}
            {% endembed %}

            {# Loader #}
            <div
                x-show="isMiniCartLoading"
                class="ui-loader--overlay"
            >
                {{ include('partials/ui/loader') }}
            </div>
        {% else %}
            <div class="heading-5">{{ 'components.async.mini_cart.heading'|localize }}</div>
            <p class="mini-cart__empty">{{ 'components.async.mini_cart.empty'|localize }}</p>
        {% endif %}

        <script>
            if (!window.onMiniCartReady) {
                window.onMiniCartReady = () => {
                    Alpine.data('miniCart', (total = 0) => ({
                        isMiniCartLoading: false,
                        failedToUpdateOrderId: null,
                        isReloadingMiniCartTemplate: false,
                        isShiftKeyPressed: false,
                        init() {
                            document.dispatchEvent(new CustomEvent('async:alpine:init'));
                            this.$store.cart.miniCartItemsTotal = total;
                        },
                        onMiniCartBlur() {
                            if (!this.isReloadingMiniCartTemplate && !this.isShiftKeyPressed) {
                                this.$store.cart.isInteractingMiniCart = false;
                                this.$store.cart.isMiniCartOpen = false;
                            }
                        },
                    }));
                    Alpine.data('miniCartItem', () => ({
                        updateItemQuantity(orderItemId, quantity) {
                            this.isMiniCartLoading = true;
                            this.failedToUpdateOrderId = null;
                            this.isReloadingMiniCartTemplate = true;

                            this.$store.cart.updateItemQuantity(orderItemId, quantity).then(() => {
                                this.isMiniCartLoading = false;
                            }).catch(() => {
                                this.failedToUpdateOrderId = orderItemId;
                            }).finally(() => {
                                this.isMiniCartLoading = false;
                            });
                        },
                        deleteItem(orderItemId) {
                            this.isMiniCartLoading = true;
                            this.failedToUpdateOrderId = null;
                            this.isReloadingMiniCartTemplate = true;

                            this.$store.cart.deleteItem(orderItemId).then(() => {
                                this.isMiniCartLoading = false;
                            }).catch(() => {
                                this.failedToUpdateOrderId = orderItemId;
                            }).finally(() => {
                                this.isMiniCartLoading = false;
                            });
                        },
                    }));
                }
            }
            window.onMiniCartReady();
        </script>
    </div>
{% endasync %}

{% async:loading %}
    <div class="ui-loader--overlay">{{ include('partials/ui/loader') }}</div>
{% endasync %}

{% schema %}
{
    "cart": {
        "type": "cart"
    }
}
{% endschema %}